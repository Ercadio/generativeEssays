From art Art Mulder Subject Getting more performance out of FAQ Archive name x faq speedups Last modified HOW TO MAXIMIZE THE PERFORMANCE OF X monthly posting Compiled by Art Mulder More RAM Faster CPU's More disk space Faster These are the standard responses you hear when you ask how to improve the performance of your Well more hardware isn't always an option and I wonder if more hardware is always even a This FAQ list is a collection of suggestions and ideas from different people on the net on how you can the best possible performance from X Windows on your workstation WITHOUT PURCHASING MORE Performance is a highly subjective The individual user must balance speed' versus features' in order to come to a personal Therefore this document can be be expected to contain many subjective opinions in and amongst the objective This document is specifically concerned with There are of course many other factors that can affect the performance of a However they are outside the scope of this People seriously interested in the whole area of system performance might want to look at the O'Reilly Nutshell Handbook System Performance Tuning by Mike I'm about of the way through reading it and it looks like a well written comprehensive treatment of system I'm unaware of any other similar Table of Contents Introduction Administrivia What about the Other X FAQ Window Managers The X Server Which Server Locking the Server into RAM Starting your Server Fonts About the Resources File Define Your Display Properly Clients A Better Clock for X A Better Terminal Emulator for X Tuning your client Miscellaneous Suggestions Pretty Pictures A Quicker Mouse Programming Thoughts Say What Other Sources of Information Author Notes changed since last new since last Introduction Administrivia This document is posted each month on or around the to the Usenet news groups and If you are reading a copy of this FAQ which is more than a few months old see the Last modified date above you should probably locate the latest edition since the information may be If you do not know how to get those newsgroups and or your site does not receive them and or this article has already expired you can retrieve this FAQ from an archive There exist several usenet FAQ archive To find out more about them and how to access them please see the Introduction to the newsgroup posting in The main FAQ archive is at This document can be found there in pub usenet x faq If you do not have access to anonymous ftp you can retrieve it by sending a mail message to with the command send usenet x faq speedups in the message What about the Other X FAQ David Lewis faq maintains the informative and well written Frequently Asked Questions Its focus is on general X information while this FAQ concentrates on The FAQ does address the issue of speed but only with regards to the X The gist of that topic seems to be Use it is faster than Please see the X FAQ for complete details Window Managers There are a lot of window managers out there with lots of different features and The choice of which to use is by necessity a balancing act between performance and useful At this point most respondents have agreed upon twm as the best candidate for a speedy window A couple of generic tricks you can try to soup up your window manger is turning off unnecessary things like zooming and opaque move Also if you lay out your windows in a tiled manner you reduce the amount of cpu power spent in raising and lowering overlapping Joe English I've found that a good font for tiling is aka misc fixed medium r normal c It is the biggest font I know of that I can use on my Sun screen and still get two column terminal windows side by side on the display with no Other font suggestions will be The X Server Which Server Make sure that your server is a proper match for your If you have a monochrome monitor use a monochrome On my Monochrome Sun I haven't noticed much difference between the Xsun colour server and XsunMono however it was pointed out to me that XsunMono is about smaller and therefore should contribute to less thanks to Jonny Farringdon Michael Salmon How your server was compiled can also make a Jeff Law advises us that on a Sun system X should be compiled with gcc version or with the unbundled Sun You can expect to get very large speedups in the server by not using the bundled SunOS I assume that similar results would occur if you used one of the other high quality commercial compilers on the Locking the Server into RAM Has anyone tried hacking the X server so that it is locked into RAM and does not get paged eg via a call to plock Does this help performance at all I've had one inquiry on this topic and a few pointers to the plock function call but no hard evidence from someone who's tried I am not in a position to give it a thanks to Eric C Claeys Danny Backx Juan Martin Starting your Server Joe English If you start up a lot of clients in your or whatever sleep for a second or two after launching each After I changed my script to do this logging in actually took less we have a heavily loaded system without much core This sounds crazy but I have confirmed that it works Warner Losh imp provided me with a good explanation of why this works which I have summarized here When you start up an X server it takes a huge amount of time to start accepting A lot of initialization is done by the server when it This process touches a large number of Any other process running at the same time would fight the server for use of the CPU and more importantly If you put a sleep in there you give the Server a chance to get itself sorted out before the clients start Similarly there is also a lot of initialization whenever an X client program starts toolkits registering widgets resources being fetched programs initializing state and databases and so All this activity is typically memory Once this initialization is done The process has reached a steady state the memory usage typically settles down to using only a few By using sleeps to stagger the launching of your clients in your you avoid them fighting each other for your workstation's limited resources This is most definitely a Your Mileage May Vary situation as there are so many variables to be considered available RAM local swap space load average number of users on your system which clients you are starting Currently in my I have a situation like sleep exec xclock sleep exec xbiff sleep exec xterm sleep exec xterm I've experimented with sleep exec xclock sleep exec xbiff sleep exec xterm sleep exec xterm I've even tried sleep exec start X clients script and then in start X clients script I had sleep exec xclock sleep exec xbiff sleep exec xterm sleep exec xterm The idea with this last one was to make sure that xinit had completely finished processing my and had settled down into a steady state before the sleep expired and all my clients were All of these yielded fairly comparable results and so I just stuck with my current setup for its You will probably have to experiment a bit to find a setup which suits Fonts Loading fonts takes time and If you minimize the number of fonts your applications use you'll get speed increases in load up One simple strategy is to choose a small number of fonts one small one large one roman whatever suits you and configure all your clients or at least all your heavily used clients to use only those few Client programs should start up quicker if their font is already loaded into the This will also conserve server resources since fewer fonts will be loaded by the Farrell McKay Joe English eg My main xterm font is so I also have twm set up to use in all it's menus and icons Twm's default font is Since I don't normally use I've eliminated one font from my Oliver Jones Keep fonts local to the workstation rather than loading them over If you will make extensive use of scalable fonts use a font About the Resources File Keep your file Saves RAM and saves on server startup Joe English One suggestion In your file try putting only the minimum number of resources that you want to have available to all of your For example reverseVideo true Then separate your resources into individual client specific resource For example HOME lib app In your file set the environment variable XUSERFILESEARCHPATH setenv XUSERFILESEARCHPATH HOME lib app defaults N The Frequently Asked Questions FAQ contains an excellent explanation of how these environment variables So when xterm launches it loads its resources from app defaults Xdvi finds them in app defaults XDvi and so on and so Note that not all clients follow the same XXxxx resource file naming You can check in your system app defaults directory often usr lib app defaults to find the proper name and then name your personal resource files with the same This is all documented in the Xt Specification pg Thanks to Kevin Samborn Michael Urban and Mike Long Kevin is willing mail his setup files to This method of organizing your personal resources has the following benefits Easier to maintain more Fewer resources are stored in the X server in the RESOURCE MANAGER As a side benefit your server may start fractionally quicker since it doesn t have to load all your Applications only process their own resources never have to sort through all of your resources to find the ones that affect It also has drawbacks the application that you are interested in has to load an additional file every time it starts This doesn't seem to make that much of a performance difference and you might consider this a huge boon to If you are modifying an application's resource database you just need to re run the application without having to xrdb xrdb will by default run your file through When your resources are split out into multiple resource files and then loaded by the individual client programs they will WATCH OUT FOR THIS I had C style comments in my file which cpp stripped When I switched to this method of distributed resource files I spent several frustrating days trying to figure out why my clients were not finding their Xt did NOT provide any error message when it encountered the C style comments in the resource files it simply silently aborted processing the resource The loss of preprocessing which can be very handy ifdef COLOR'' is enough to cause some people to dismiss this method of resource You may also run into some clients which break the For example neither Emacs nor Xvt will find their resources if they are anywhere other than in when starting up a client on a machine that does not share files with the machine where your resources are stored your client will not find its Loading all your resources into the server will guarantee that all of your clients will always find their Casey Leedom A possible compromise suggestion that I have and am planning on trying is to put resources for all my heavily used clients eg xterm into my file and to use the separate resources files method for clients that I seldom Define Your Display Properly Client programs are often executed on the same machine as the In that situation rather than setting your DISPLAY environment variable to hostname where hostname is the name of your workstation you should set your DISPLAY variable to unix or By doing this you access optimized routines that know that the server is on the same machine and use a shared memory method of transferring thanks to Patrick J Horgan See the DISPLAY NAMES section of the X man page for further explanation of how to properly set your display I don't think it's stock MIT but at least Data General and HP have libraries that are smart enough to use local communication even when the DISPLAY isn't set Rob Sartin sartin Jody Goldberg sent me an Xlib patch to change stock to use local communication even if DISPLAY is not properly I don't want to get in the business of distributing or trying to juggle non MIT patches and so have elected not to include it Hopefully MIT will apply this minor lines patch In the meantime if you want to try it yourself email Clients If you only have a few megabytes of Ram then you should think carefully about the number of programs you are Think also about the kind of programs you are For example Is there a smaller clock program than xclock Unfortunately I haven't really noticed that programs advertise how large they are so the onus is on us to do the research and spread the Suggestions on better alternatives to the some of the standard clients eg Xclock Xterm Xbiff are I've received some contradictory advice from people on the subject of X client Some advocate the use of programs that are strictly Xlib based since Xt Xaw and other toolkits are rather Others warn us that other applications which you are using may have already loaded up one or more of these shared In this case using a non Xt for example client program may actually increase the amount of RAM The upshot of all this seems to be Don't mix That is try and use just Athena clients or just Xview clients or just Motif clients etc If you use more than one then you're dragging in more than one toolkit Know your environment and think carefully about which client programs would work best together in that Thanks to Rob Sartin sartin Duncan Sinclair A Better Clock for X xcuckoo suggested by Duncan Sinclair available on Xcuckoo displays a clock in the title bar of another Saves screen real mclock suggested by der Mouse mouse available in X Non Xt Extensively it can be made to look very much like MIT oclock or mostly like xclock purely by changing Of course the ultimate clock one that consumes no resources and takes up no screen real estate is the one that hangs on your A Better Terminal Emulator for X From the README file distributed with xterm Abandon All Hope Ye Who Enter Here This is undoubtedly the most ugly program in the Ugly maybe but at my site it's still the most I suspect that xterm is one of the most used clients at many if not most Laziness Isn't there a better terminal emulator available See If you must use xterm you can try reducing the number of saveLines to reduce memory Oliver Jones Jonny Farringdon Xvt suggested by Richard Hesketh available in contrib xvt you don't need all the esoteric features of xterm then get hold of xvt it was written here just to save swap space as xterm is rather a hog This was written as a partial 'clone' of You don't have to rename your resources as xvt pretends to be In it's current version you cannot bind keys as you can in I've heard that there are versions of xvt with this feature but I've not found any UPDATE March I recently had a few email conversations with Brian Warkentin regarding He questions whether xvt really is at all faster than For instance xvt may initialize slightly faster but compare scrolling speed try this quickie benchmark bin time dd if etc termcap bs and see which program can scroll Also while xterm may be slightly larger in RAM requirements We don't have any hard numbers here does anyone else shared libraries and shared text segments mean that xterm's paging requirements are not that As an experiment he ripped out all the tek stuff from xterm but it made little difference since if you never use it it never gets brought into So here we stand with some conflicting reports on the validity of xvt over In summary Caveat Emptor your mileage may If you can provide some hard data I'd like to see Specifically How much RAM each occupies how much swap each needs relative speed of each mterm suggested by der Mouse mouse available in X o I also have my own terminal Its major lack is scrollback but some people like it Tuning your client Suggestions on how you can tune your client programs to work From Scott Barman comes a suggestion regarding Motif Text Field Widgets I noticed that during data entry into Motif text field widgets I was getting a slight lag in response to some keystrokes particularly the initial one in the Examining the what was going on with xscope I found It seems that when the resource XmNblinkRate is non zero and the focus is on a text field widget or even just a text widget the I beam cursor will Every time the cursor appears or disappears in those widgets the widget code is making a request to the server CopyArea The user can stop this by setting the resource XmNblinkRate to It is not noticeable on a SPARC but it does make a little difference on a slower system This specific suggestion can probably be applied in general to lots of Consider your heavily used clients are there any minor embellishments that can be turned off and thereby save on Server requests Miscellaneous Suggestions Pretty Pictures Don't use large bitmaps GIF's etc as root window The more complicated your root window bitmap the slower the server is at redrawing your screen when you reposition windows or redraw etc These take up RAM and CPU I work on a Sun SPARC and I'm conscious of performance issues I can't comprehend it when I see people with a Sun running xphoon as their root I'll let someone else figure out how much RAM would be occupied by having a full screen root image on a colour If you're anything like me you need all the screen real estate that you can get for clients and so rarely see the root window Thanks to Qiang Alex Zhao for reminding me of this A Quicker Mouse Using xset you can adjust how fast your pointer moves on the screen when you move your I use xset m in my file which lets me send my pointer across the screen with just a flick of the See the xset man page for further ideas and Hint sometimes you may want to slow down your mouse tracking for fine To cover my options I have placed a number of different mouse setting commands into a menu in my window for twm menu mouse settings Mouse Settings Very Fast xset m Normal Fast xset m System Default Un Accelerated xset m default Glacial xset m Programming Thoughts Joe English To speed up applications that you're developing there are tons of things you can Some that stick out For Motif programs don't set XmFontList resources for individual buttons labels lists use the defaultFontList or labelFontList or whatever resource of the highest level manager Again stick to as few fonts as Better yet don't use Motif at It's an absolute Don't create and destroy widgets on the Try to reuse This will avoid many problems with buggy toolkits Use a line width of in On some servers this makes a HUGE Compress and collapse multiple Expose This can make the difference between a fast application and a completely unusable Francois Staes Just a small remark I once heard that using a better malloc function would greatly increase performance of Xt based applications since they use malloc They suggested trying out the GNUY malloc but I didn't find the time I did some tests on small programs just doing malloc and free and the differences were indeed very noticeable somewhat times faster Any confirmation on this from anyone Andre' Beck Andre Beck Unnecessary NoExpose Most people use XCopyArea XCopyPlane as fastest blit routines but they forget to reset graphics exposures in the GC used for the This will cause a NoExpose Event every blit that in most cases only puts load onto the connection and forces the client to run through it's event loop again and Thousands of XChangeGC This Gfx Context Switching is also seen in most handcoded X Apps where only one or few GCs are created and then heavily changed again and Xt uses a definitely better mechanism by caching and sharing a lot of GCs with all needed This will remove the load of subsequent XChangeGC requests from the connection by moving it toward the client startup phase Say What Some contributors proposed ideas that seem right off the wall at first David Lewis by day by night david How about this swap displays with someone Run all your programs on the other machine and display locally the other user runs off your machine onto the other Goal reduce context switches in the same operation between client and I'm not in a situation where I can easily try this but I have received the following Michael Salmon I regularly run programs on other machines and I notice a big I try to run on a machine where I will reduce net usage and usually with nice to reduce the impact of my This helps a lot on my poor little with only MB it was essential when I only had Casey Leedom The Server and the client are competing for the same CPU as your server when you run it on the same Not really a major problem except that the client and the server are in absolute synchronicity and are context Timothy H Panton Firstly it relies on the fact that most CPU's are mostly idle X's cpu usage is so the chances of you and your teammate doing something cpu intensive at the same time is If they are not then you get twice the cpu memory available for your The second factor is that context switches are expensive using cpu's halves them you pay a price due to the overhead of going over the network but this is offset in most cases by the improved buffering of a network typically vs for a pipe allowing even fewer context Other Sources of Information Volume in O'Reilly's X Window System Series X Window System Administrator's Guide'' is a book all X administrator's should Adrian Nye A lot more tips on performance are in the paper Improving X Application Performance by Chris Peterson and Sharon Chang in Issue of The X An earlier version of this paper appeared in the Xhibition conference This paper is absolutely essential reading for X Author Notes This list is currently maintained by Art Mulder Suggestions corrections or submission for inclusion in this list are gladly Layout suggestions and comments spelling mistak's too are also Currently I have listed all contributors of the various comments and If you do not want to be credited please tell speedup x faq is copyright c by Arthur Mulder You may copy this document in whole or in part as long as you don't try to make money off it or pretend that you wrote mulder Do not be conformed to this world Department of Computing Science but be transformed by the renewal University of Alberta Edmonton Canada of your mind Romans