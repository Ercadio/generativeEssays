From Cavalier Subject Help needed I hope somebody out here can help I am currently working on a project where I am trying to communicate from an IBM with Phoenix BIOS using C to a board that I made with an Intel CPU with UART The board works fine with the TRANSMIT command and Terminal Emulation mode of Kermit but there seems to be something wrong with the initialization or protocol used when I try C I need to access the unit I built using C because I have a sizable chunk of C code that I will be using to perform calculations and operations that will be very difficult to code in assembly language for the I have included the assembly code that I am running and the C code that I am trying to If anyone can show me something that I am doing blatantly incorrectly or that I am missing because of my lack of knowledge about RS serial communications please e mail I wrote the assembly language to wait for a character to be received and then to check it against the character if a is received the LEDs will indicate Two C programs that I have written do nothing but set up COM port and send the One uses the bioscom function in the other uses the software interrupt function in I have triple checked the baud rate the parity none the stop bits the character length bits and the interrupt calls for Currently I am at a loss as to what may be Any hardware gurus out there want to comment Thanks alot Hubert De Jesus INTEL ASM COMMAND EQU Command Register on PORTA EQU Port A on TIMERLO EQU High bits of Timer TIMERHI EQU Low bits of Timer UARTDATA EQU UART Data Register UARTCMD EQU UART Command Register ORG SRAM location MVI A Set Low Timer Bits STA TIMERLO MVI A Set High Timer Bits STA TIMERHI MVI A Start Timer Enable Port A STA COMMAND MVI A Display on segment LEDs STA PORTA MVI A Clear UART Command STA UARTCMD STA UARTCMD STA UARTCMD MVI A Internally reset UART STA UARTCMD LDA UARTDATA Remove extraneous data MVI A Init UART for data bits STA UARTCMD no parity stop bit async MVI A Enable Transmit and Receive STA UARTCMD INIT LDA UARTCMD Read Status Register ANI Is RxRDY JZ INIT No loop LDA UARTDATA Read Data Character CPI ' ' Is Character JNZ INIT No loop MVI A Character received STA PORTA Display on segment LEDs HLT END C using BIOSCOM include include include define INIT define SEND define RECEIVE define STATUS define void main char abyte abyte bioscom INIT abyte printf Initialized COMM PORT n while bioscom STATUS abyte ' ' bioscom SEND abyte printf Sent start character n C using include include include include main union REGS registers registers registers printf Initialized n registers registers printf Sent start character n