From John Ioannidis Subject Re Source of random bits on a Unix workstation In article Bennett Todd Salomon Brothers NY writes I heard about this solution and it sounded Then I heard that folks were experiencing times of seconds to run this on reasonably configured I'm not willing to add that much delay to someone's login My approach etherfind compress skip takes a second or two to I'm considering writing the be all and end all of solutions that launches the and simultaneously tries to suck bits off the net and if the net should be sitting SO idle that it can't get after compression before finishes use the This way I could have guaranteed good bits and a deterministic upper bound on login time and still have the common case of login take only a couple of extra seconds to hash of core I bet I know who the source of your information is No it's not acceptable if it's part of your login But if you are going to use network traffic as the source of pseudo random information do the right thing and pass it through a cryptographic hash function not a Aside from the fact that it will run faster it will give better results think of a cryptographic hash as a function that distills randomness Something along the lines of etherfind t x n dd bs count dev null should do the t gives you timestamps and the lack of u makes sure that dd does not get ten lines as opposed to ten The above takes a couple of seconds on a lightly loaded Bennett ji