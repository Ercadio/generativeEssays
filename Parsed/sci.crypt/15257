From Bennett Todd Salomon Brothers NY Subject Re Source of random bits on a Unix workstation For your application what you can do is to encrypt the real time clock value with a secret Well If I only had to solve the problem for myself and were willing to have to type in a second password the secret key whenever I logged in it could However I'm trying to create a solution that anyone can use and which once installed is just as effortless to start up as the non solution of just using xhost to control I've got religeous problems with storing secret keys on multiuser For a good discussion of cryptographically good random number generators check out the draft ietf security randomness Internet Draft available at your local friendly internet drafts Thanks for the pointer It was good reading and I liked the idea of using several unrelated sources with a strong mixing However unless I missed something the only source they suggested aside from a hardware RNG that seems available and unguessable by an intruder when a Unix is fresh booted is I O buffers related to network I believe my solution basically uses that strategy without requiring me to reach into the A reasonably source of randomness is the output of a cryptographic hash function when fed with a large amount of more or less random For example running on dev mem is a slow but random enough source of random bits there are bound to be bits of entropy in the tens or hundreds of megabytes of data in a modern workstation's memory as a fair amount of them are system timers i o buffers I heard about this solution and it sounded Then I heard that folks were experiencing times of seconds to run this on reasonably configured I'm not willing to add that much delay to someone's login My approach etherfind compress skip takes a second or two to I'm considering writing the be all and end all of solutions that launches the and simultaneously tries to suck bits off the net and if the net should be sitting SO idle that it can't get after compression before finishes use the This way I could have guaranteed good bits and a deterministic upper bound on login time and still have the common case of login take only a couple of extra Bennett