From John Ioannidis Subject Re Source of random bits on a Unix workstation In article C JA s A Nicol C So writes In article Bennett Todd Salomon Brothers Inc , NY writes This came up because I decided to configure up MIT MAGIC COOKIE security for X R For this to work you need to stick some bits that an intruder can't guess in a file readable only by you which X client applications read They pass the bits back to the server when they want to establish a connection What I settled on was grabbing a bunch of traffic off the network Basically, I ran etherfind u x greater compress and skipped over K of output, then grabbed my bits As best I can tell, these are bits that can be expected to be reasonably uniformly distributed, and quite unguessable by an intruder For your application, what you can do is to encrypt the real time clock value with a secret key For a good discussion of cryptographically good random number generators, check out the draft ietf security randomness txt Internet Draft, available at your local friendly internet drafts repository A reasonably source of randomness is the output of a cryptographic hash function e g , MD , when fed with a large amount of more or less random data For example, running MD on dev mem is a slow, but random enough, source of random bits there are bound to be bits of entropy in the tens or hundreds of megabytes of data in a modern workstation's memory, as a fair amount of them are system timers, i o buffers, etc ji